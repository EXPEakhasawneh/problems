{"version":3,"sources":["../../src/problem2/prob2.test.js"],"names":["concat","test","toBeObject","arr1","arr2","expected","expect","toEqual"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;;AAEAC,KAAK,kBAAL,EAAyB,MAAM;AAC7B,QAAMC,aAAa;AACjBC,UAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADW;AAEjBC,UAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFW;AAGjBC,cAAU,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,EAAsB,CAAtB;AAHO,GAAnB;AAKAC,SAAON,OAAOE,WAAWC,IAAlB,EAAwBD,WAAWE,IAAnC,CAAP,EAAiDG,OAAjD,CAAyDL,WAAWG,QAApE;AACD,CAPD;;AASAJ,KAAK,0EAAL,EAAiF,MAAM;AACrF,QAAMC,aAAa;AACjBC,UAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADW;AAEjBC,UAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFW;AAGjBC,cAAU,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;AAHO,GAAnB;AAKAC,SAAON,OAAOE,WAAWC,IAAlB,EAAwBD,WAAWE,IAAnC,CAAP,EAAiDG,OAAjD,CAAyDL,WAAWG,QAApE;AACD,CAPD;;AASAJ,KAAK,4EAAL,EAAmF,MAAM;AACvF,QAAMC,aAAa;AACjBC,UAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CADW;AAEjBC,UAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFW;AAGjBC,cAAU,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,GAA9B;AAHO,GAAnB;AAKAC,SAAON,OAAOE,WAAWC,IAAlB,EAAwBD,WAAWE,IAAnC,CAAP,EAAiDG,OAAjD,CAAyDL,WAAWG,QAApE;AACD,CAPD;;AASAJ,KAAK,6CAAL,EAAoD,MAAM;AACxD,QAAMC,aAAa;AACjBC,UAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADW;AAEjBC,UAAM,EAFW;AAGjBC,cAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAHO,GAAnB;AAKAC,SAAON,OAAOE,WAAWC,IAAlB,EAAwBD,WAAWE,IAAnC,CAAP,EAAiDG,OAAjD,CAAyDL,WAAWG,QAApE;AACD,CAPD","file":"prob2.test.js","sourcesContent":["import concat from './prob2';\n\ntest('concat two array', () => {\n  const toBeObject = {\n    arr1: ['a', 'b', 'c'],\n    arr2: [1, 2, 3],\n    expected: ['a', 1, 'b', 2, 'c', 3],\n  };\n  expect(concat(toBeObject.arr1, toBeObject.arr2)).toEqual(toBeObject.expected);\n});\n\ntest('concat two array where length of the second array greater than first one', () => {\n  const toBeObject = {\n    arr1: ['a', 'b', 'c'],\n    arr2: [1, 2, 3, 4, 5],\n    expected: ['a', 1, 'b', 2, 'c', 3, 4, 5],\n  };\n  expect(concat(toBeObject.arr1, toBeObject.arr2)).toEqual(toBeObject.expected);\n});\n\ntest('concat two array where length of the first array greater than first second', () => {\n  const toBeObject = {\n    arr1: ['a', 'b', 'c', 'd', 'e'],\n    arr2: [1, 2, 3],\n    expected: ['a', 1, 'b', 2, 'c', 3, 'd', 'e'],\n  };\n  expect(concat(toBeObject.arr1, toBeObject.arr2)).toEqual(toBeObject.expected);\n});\n\ntest('concat two array where one of them is empty', () => {\n  const toBeObject = {\n    arr1: ['a', 'b', 'c'],\n    arr2: [],\n    expected: ['a', 'b', 'c'],\n  };\n  expect(concat(toBeObject.arr1, toBeObject.arr2)).toEqual(toBeObject.expected);\n});\n"]}