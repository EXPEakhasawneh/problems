{"version":3,"sources":["../../src/problem1/prob1.test.js"],"names":["sumArrForLoop","sumArrWhileLoop","sumArrRecur","testInputsOutputsObj","positiveNumbers","arr","expected","negativeNumbers","mixtureNumbers","emptyArr","test","expect","toBe"],"mappings":"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","file":"prob1.test.js","sourcesContent":["import { sumArrForLoop, sumArrWhileLoop, sumArrRecur } from './prob1';\n\nconst testInputsOutputsObj = {\n  positiveNumbers: {\n    arr: [1, 2, 3, 4],\n    expected: 10,\n  },\n  negativeNumbers: {\n    arr: [-1, -2, -3, -4],\n    expected: -10,\n  },\n  mixtureNumbers: {\n    arr: [0, -1, 2, -3, 4],\n    expected: 2,\n  },\n  emptyArr: {\n    arr: [],\n    expected: 0,\n  },\n};\n\ntest('sum of the numbers in positiveNumbers array using sumArrForLoop function', () => {\n  expect(sumArrForLoop(testInputsOutputsObj.positiveNumbers.arr))\n    .toBe(testInputsOutputsObj.positiveNumbers.expected);\n});\n\ntest('sum of the numbers in negativeNumbers array using sumArrForLoop function', () => {\n  expect(sumArrForLoop(testInputsOutputsObj.negativeNumbers.arr))\n    .toBe(testInputsOutputsObj.negativeNumbers.expected);\n});\n\ntest('sum of the numbers in mixtureNumbers array using sumArrForLoop function', () => {\n  expect(sumArrForLoop(testInputsOutputsObj.mixtureNumbers.arr))\n    .toBe(testInputsOutputsObj.mixtureNumbers.expected);\n});\n\ntest('sum of the numbers in emptyArr array using sumArrForLoop function', () => {\n  expect(sumArrForLoop(testInputsOutputsObj.emptyArr.arr))\n    .toBe(testInputsOutputsObj.emptyArr.expected);\n});\n\ntest('sum of the numbers in positiveNumbers array using sumArrWhileLoop function', () => {\n  expect(sumArrWhileLoop(testInputsOutputsObj.positiveNumbers.arr))\n    .toBe(testInputsOutputsObj.positiveNumbers.expected);\n});\n\ntest('sum of the numbers in negativeNumbers array using sumArrWhileLoop function', () => {\n  expect(sumArrWhileLoop(testInputsOutputsObj.negativeNumbers.arr))\n    .toBe(testInputsOutputsObj.negativeNumbers.expected);\n});\n\ntest('sum of the numbers in mixtureNumbers array using sumArrWhileLoop function', () => {\n  expect(sumArrWhileLoop(testInputsOutputsObj.mixtureNumbers.arr))\n    .toBe(testInputsOutputsObj.mixtureNumbers.expected);\n});\n\ntest('sum of the numbers in emptyArr array using sumArrWhileLoop function', () => {\n  expect(sumArrWhileLoop(testInputsOutputsObj.emptyArr.arr))\n    .toBe(testInputsOutputsObj.emptyArr.expected);\n});\n\ntest('sum of the numbers in positiveNumbers array using sumArrRecur function', () => {\n  expect(sumArrRecur(testInputsOutputsObj.positiveNumbers.arr))\n    .toBe(testInputsOutputsObj.positiveNumbers.expected);\n});\n\ntest('sum of the numbers in negativeNumbers array using sumArrRecur function', () => {\n  expect(sumArrRecur(testInputsOutputsObj.negativeNumbers.arr))\n    .toBe(testInputsOutputsObj.negativeNumbers.expected);\n});\n\ntest('sum of the numbers in mixtureNumbers array using sumArrRecur function', () => {\n  expect(sumArrRecur(testInputsOutputsObj.mixtureNumbers.arr))\n    .toBe(testInputsOutputsObj.mixtureNumbers.expected);\n});\n\ntest('sum of the numbers in emptyArr array using sumArrRecur function', () => {\n  expect(sumArrRecur(testInputsOutputsObj.emptyArr.arr))\n    .toBe(testInputsOutputsObj.emptyArr.expected);\n});\n"]}